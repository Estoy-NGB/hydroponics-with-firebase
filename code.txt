#include <Arduino.h>
#if defined(ESP32)
  #include <WiFi.h>
#elif defined(ESP8266)
  #include <ESP8266WiFi.h>
#endif
#include <Firebase_ESP_Client.h>
#include <Wire.h>
#include <Adafruit_Sensor.h>
#include <DHT.h>
#include <OneWire.h>
#include <DallasTemperature.h>

// Provide the token generation process info.
#include "addons/TokenHelper.h"
// Provide the RTDB payload printing info and other helper functions.
#include "addons/RTDBHelper.h"

// Insert your network credentials
#define WIFI_SSID "The Engineer Store" //wifi creds
#define WIFI_PASSWORD "kritishdhariwal"

// Insert Firebase project API Key
#define API_KEY "AIzaSyCaQG6JjbQGkz62jjI9eR0lcztciFDBONY"

// Insert Authorized Email and Corresponding Password
#define USER_EMAIL "bharathng61@gmail.com"
#define USER_PASSWORD "Bharath@1"

// Insert RTDB URLefine the RTDB URL
#define DATABASE_URL "marias-69f39-default-rtdb.firebaseio.com"
// define temp sensor type and pin
#define DHTPIN 12
#define DHTTYPE DHT22
DHT dht(DHTPIN, DHTTYPE);
// variables to hold temp sensors reading
//-------dht sensor--------//
float tempa;
float hum;
#define UPPER_THRESHOLD  20 // upper temperature threshold
#define LOWER_THRESHOLD  15 // lower temperature threshold

//---ph sensor---//
const int potPin=34;
float ph;
float Value=0;
//---tds  sensor------//

const int oneWireBus = 25; // GPIO where the DS18B20 is connected to
 
#define TdsSensorPin 35
#define VREF 3.3      // analog reference voltage(Volt) of the ADC
#define SCOUNT  30           // sum of sample point 
int analogBuffer[SCOUNT];    // store the analog value in the array, read from ADC
int analogBufferTemp[SCOUNT];
int analogBufferIndex = 0;
int copyIndex = 0;
float averageVoltage = 0;
float tdsValue = 0;
float temperature = 0;
 
 
OneWire oneWire(oneWireBus);    // Setup a oneWire instance to communicate with any OneWire devices
 
DallasTemperature sensors(&oneWire);    // Pass our oneWire reference to Dallas Temperature sensor
 


// Define Firebase objects
FirebaseData fbdo;
FirebaseAuth auth;
FirebaseConfig config;

// Variable to save USER UID
String uid;

// Variables to save database paths
String databasePath;
String phPath;
String humPath;
String tempPath;
String tdspath;
String water_temppath;
//String presPath;



// Timer variables (send new readings every three minutes)
unsigned long sendDataPrevMillis = 0;
unsigned long timerDelay = 120000;


// Initialize WiFi
void initWiFi() {
  WiFi.begin(WIFI_SSID, WIFI_PASSWORD);
  Serial.print("Connecting to WiFi ..");
  while (WiFi.status() != WL_CONNECTED) {
    Serial.print('.');
    delay(1000);
  }
  Serial.println(WiFi.localIP());
  Serial.println();
}

// Write float values to the database
void sendFloat(String path, float value){
  if (Firebase.RTDB.setFloat(&fbdo, path.c_str(), value)){
    Serial.print("Writing value: ");
    Serial.print (value);
    Serial.print(" on the following path: ");
    Serial.println(path);
    Serial.println("PASSED");
    Serial.println("PATH: " + fbdo.dataPath());
    Serial.println("TYPE: " + fbdo.dataType());
  }
  else {
    Serial.println("FAILED");
    Serial.println("REASON: " + fbdo.errorReason());
  }
}

void setup(){
  Serial.begin(115200);
  Serial.println();
   dht.begin();
   //-------------------phsensor---------//
// pinMode(13,OUTPUT);
pinMode(potPin,INPUT);
  delay(1000);
 Serial.println("Ready");
  //-------------------tds sensor---------//
  pinMode(TdsSensorPin, INPUT);
  sensors.begin();

  

  initWiFi();

  // Assign the api key (required)
  config.api_key = API_KEY;

  // Assign the user sign in credentials
  auth.user.email = USER_EMAIL;
  auth.user.password = USER_PASSWORD;

  // Assign the RTDB URL (required)
  config.database_url = DATABASE_URL;

  Firebase.reconnectWiFi(true);
  fbdo.setResponseSize(4096);

  // Assign the callback function for the long running token generation task */
  config.token_status_callback = tokenStatusCallback; //see addons/TokenHelper.h

  // Assign the maximum retry of token generation
  config.max_token_generation_retry = 5;

  // Initialize the library with the Firebase authen and config
  Firebase.begin(&config, &auth);

  // Getting the user UID might take a few seconds
  Serial.println("Getting User UID");
  while ((auth.token.uid) == "") {
    Serial.print('.');
    delay(1000);
  }
  // Print user UID
  uid = auth.token.uid.c_str();
  Serial.print("User UID: ");
  Serial.println(uid);

  // Update database path
  databasePath = "/UsersData/" + uid;

  // Update database path for sensor readings
  phPath = databasePath + "/phValue"; // --> UsersData/<user_uid>/temperature
  humPath = databasePath + "/humidity"; // --> UsersData/<user_uid>/humidity
  tempPath = databasePath + "/temperature"; // --> UsersData/<user_uid>/temperature
  tdspath = databasePath + "/tdsvalue"; // --> UsersData/<user_uid>/tds
  water_temppath = databasePath + "/water_temp"; // --> UsersData/<user_uid>/tds
  //presPath = databasePath + "/pressure"; // --> UsersData/<user_uid>/pressure
}

void loop(){
  fun1();
  // Send new readings to database
  if (Firebase.ready() && (millis() - sendDataPrevMillis > timerDelay || sendDataPrevMillis == 0)){
    sendDataPrevMillis = millis();

    // Get latest sensor readings
    tempa = dht.readTemperature();
    hum = dht.readHumidity();
    if (isnan(tempa)) {
    Serial.println("Failed to read from DHT sensor!");
  } else {
    if (tempa > UPPER_THRESHOLD) {
      Serial.println("Turn the fan on");
      digitalWrite(FAN_PIN, HIGH); // turn on
    } else if (tempa < LOWER_THRESHOLD) {
      Serial.println("Turn the fan off");
      digitalWrite(FAN_PIN, LOW); // turn off
    }
  } 
    
  
         sensors.requestTemperatures();

    
   
//--------------------------ph2-------------////
Value= analogRead(potPin);
    Serial.print(Value);
    Serial.print(" | ");
    float voltage=Value*(3.3/4095.0);
    ph=(3.3*voltage);
    Serial.println(ph);
    delay(500);
//---------------------------------------tds sensor--------------------------//
 

// Send readings to database:
    sendFloat(phPath,ph );
    sendFloat(humPath, hum);
    sendFloat(tempPath,tempa );
    sendFloat(tdspath,tdsValue );
    sendFloat(water_temppath,temperature );
}
}
void fun1()
{
  sensors.requestTemperatures();
  float temperature = sensors.getTempCByIndex(0);
 
  static unsigned long analogSampleTimepoint = millis();
  if (millis() - analogSampleTimepoint > 40U)  //every 40 milliseconds,read the analog value from the ADC
  {
    analogSampleTimepoint = millis();
    analogBuffer[analogBufferIndex] = analogRead(TdsSensorPin);    //read the analog value and store into the buffer
    analogBufferIndex++;
    if (analogBufferIndex == SCOUNT)
      analogBufferIndex = 0;
  }
  static unsigned long printTimepoint = millis();
  if (millis() - printTimepoint > 800U)
  {
    printTimepoint = millis();
    for (copyIndex = 0; copyIndex < SCOUNT; copyIndex++)
      analogBufferTemp[copyIndex] = analogBuffer[copyIndex];
    averageVoltage = getMedianNum(analogBufferTemp, SCOUNT) * (float)VREF / 1024.0; // read the analog value more stable by the median filtering algorithm, and convert to voltage value
    float compensationCoefficient = 1.0 + 0.02 * (temperature - 25.0); //temperature compensation formula: fFinalResult(25^C) = fFinalResult(current)/(1.0+0.02*(fTP-25.0));
    float compensationVolatge = averageVoltage / compensationCoefficient; //temperature compensation
    tdsValue = (133.42 * compensationVolatge * compensationVolatge * compensationVolatge - 255.86 * compensationVolatge * compensationVolatge + 857.39 * compensationVolatge) * 0.5; //convert voltage value to tds value
 
    Serial.print("TDS Value:");
    Serial.print(tdsValue, 0);
    Serial.println("ppm");
 
    Serial.print("Temperature:");
    Serial.print(temperature);
    Serial.println("ÂºC");
  }
}
int getMedianNum(int bArray[], int iFilterLen)
{
  int bTab[iFilterLen];
  for (byte i = 0; i < iFilterLen; i++)
    bTab[i] = bArray[i];
  int i, j, bTemp;
  for (j = 0; j < iFilterLen - 1; j++)
  {
    for (i = 0; i < iFilterLen - j - 1; i++)
    {
      if (bTab[i] > bTab[i + 1])
      {
        bTemp = bTab[i];
        bTab[i] = bTab[i + 1];
        bTab[i + 1] = bTemp;
      }
    }
  }
  if ((iFilterLen & 1) > 0)
    bTemp = bTab[(iFilterLen - 1) / 2];
  else
    bTemp = (bTab[iFilterLen / 2] + bTab[iFilterLen / 2 - 1]) / 2;
  return bTemp;
}